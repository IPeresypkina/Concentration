//
//  ViewController.swift
//  Concentration2
//
//  Created by –ò—Ä–∏–Ω–∞ –ü–µ—Ä–µ—Å—ã–ø–∫–∏–Ω–∞ on 17/09/2019.
//  Copyright ¬© 2019 –ò—Ä–∏–Ω–∞ –ü–µ—Ä–µ—Å—ã–ø–∫–∏–Ω–∞. All rights reserved.
//


import UIKit
import Foundation
/*
 –£ –Ω–∞—Å 3 —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö: –∫–ª–∞—Å—Å ‚ÄãViewController‚Äã, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ‚ÄãCard‚Äã –∏ –∫–ª–∞—Å—Å ‚ÄãConcentration‚Äã. –ù–∞—á–Ω–µ–º —Å ‚ÄãViewController‚Äã.
 –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ‚Äãgame‚Äã - —ç—Ç–æ –Ω–∞—à–∞ –ú–æ–¥–µ–ª—å
 
 –ú—ã —Ö–æ—Ç–∏–º, —á—Ç–æ–±—ã –ú‚Äã–æ–¥–µ–ª—å –±—ã–ª–∞ ‚Äãprivate‚Äã –∏–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞—à–µ–∏ÃÜ –∏–≥—Ä—ã ‚Äãgame‚Äã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ‚ÄãnumberOfPairsOfCards‚Äã, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ—Å–Ω–æ —Å–≤—è–∑–∞–Ω–∞ —Å –Ω–∞—à–∏–º ‚ÄãUI‚Äã, —Ç–æ –µ—Å—Ç—å —Å —á–∏—Å–ª–æ–º –∫–Ω–æ–ø–æ–∫ –Ω–∞ –Ω–∞—à–µ–º ‚ÄãUI‚Äã.
 –ï—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º —Å–¥–µ–ª–∞—Ç—å –∏–≥—Ä—É ‚Äãgame‚Äã ‚Äãpublic‚Äã, —Ç–æ —Ç–æ–≥–¥–∞ –º—ã –¥–æ–ª–∂–Ω—ã —Ç–∞–∫–∂–µ —Å–¥–µ–ª–∞—Ç—å ‚Äãpublic‚Äã ‚ÄãcardButtons‚Äã. –≠—Ç–æ —Ç–æ, —á—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–æ –Ω–∞ –Ω–∞—à–µ–º –º–∞–ª–µ–Ω—å–∫–æ–º —ç–∫—Ä–∞–Ω–Ω–æ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–µ –≤‚Äã Interface Builder‚Äã, –∞ –º—ã –Ω–µ –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å ‚ÄãcardButtons ‚Äãpublic‚Äã. –ú—ã –¥–æ–ª–∂–Ω—ã –¥–µ—Ä–∂–∞—Ç—å –Ω–∞—à U‚ÄãI‚Äã ‚Äãprivate
 */


extension Int {
    var arc4random: Int {
        if self > 0 {
            return Int(arc4random_uniform(UInt32(self))) }
        else if self < 0 {
            return -Int(arc4random_uniform(UInt32(abs(self))))
        } else {
            return 0
        }
    }
}

class ViewController: UIViewController {
    
    private lazy var game = Concentration(numberOfPairsOfCards: numberOfPairsOfCards)
    var numberOfPairsOfCards: Int {
        return cardButtons.count / 2
    }
    private var themeBackgroundColor: UIColor?
    private var themeCardColor: UIColor?
    private var themeCardTitles: [String]?
    private var emoji = [Card: String]()
    
    private let halloweenTheme = Theme.init(backgroundColor: #colorLiteral(red: 0, green: 0, blue: 0, alpha: 1), cardColor: #colorLiteral(red: 1, green: 0.5763723254, blue: 0, alpha: 1), cardTitles: ["üëª", "üéÉ", "üíÄ", "üòà", "üò±", "ü¶á", "üï∑", "ü§°", "üï∏", "ü¶â"])
    private let happyTheme = Theme.init(backgroundColor: #colorLiteral(red: 0.9686274529, green: 0.78039217, blue: 0.3450980484, alpha: 1), cardColor: #colorLiteral(red: 0.1764705926, green: 0.4980392158, blue: 0.7568627596, alpha: 1), cardTitles: ["ü§ó", "üòç", "ü§£", "üòÅ", "üôÜ", "üòò", "üôÜ‚Äç‚ôÇÔ∏è", "üéâ", "üòã", "üòõ"])
    private let sadTheme = Theme.init(backgroundColor: #colorLiteral(red: 0.05882352963, green: 0.180392161, blue: 0.2470588237, alpha: 1), cardColor: #colorLiteral(red: 0.4392156899, green: 0.01176470611, blue: 0.1921568662, alpha: 1), cardTitles: ["üò≠", "üò¢", "üôÅ", "üòî", "ü§ß", "üò©", "üò®", "‚òπÔ∏è", "üòê", "üòì"])
    private let foodTheme = Theme.init(backgroundColor: #colorLiteral(red: 0.9686274529, green: 0.78039217, blue: 0.3450980484, alpha: 1), cardColor: #colorLiteral(red: 0.9254902005, green: 0.2352941185, blue: 0.1019607857, alpha: 1), cardTitles: ["üçï", "üçâ", "üçî", "üçü", "üç´", "üå≠", "üçñ", "üåØ", "üçó", "üçù"])
    
    @IBOutlet private weak var matchLabel: UILabel!
    @IBOutlet private weak var scoreLabel: UILabel!
    @IBOutlet private(set) var cardButtons: [UIButton]!
    @IBOutlet private weak var restartButton: UIButton!
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        settingTheme()
        updateView()
        restartButton.isHidden = true
    }
    
    private func settingTheme() {
        let themes = [halloweenTheme, happyTheme, sadTheme, foodTheme]
        let randomTheme = themes.count.arc4random
        //        print(themes[randomTheme])
        themeBackgroundColor = themes[randomTheme].backgroundColor
        themeCardColor = themes[randomTheme].cardColor
        themeCardTitles = themes[randomTheme].cardTitles
        view.backgroundColor = themeBackgroundColor
        scoreLabel.textColor = themeCardColor
        matchLabel.textColor = themeCardColor
        restartButton.tintColor = themeCardColor
    }
    
    private func updateView() {
        for index in cardButtons.indices {
            let button = cardButtons[index]
            let card = game.cards[index]
            if card.isFaceUp {
                button.setTitle(emoji(for: card), for: .normal)
                button.backgroundColor = .white
                button.isEnabled = false
            } else {
                button.setTitle("", for: .normal)
                button.backgroundColor = card.isMatched ? #colorLiteral(red: 1, green: 0.5763723254, blue: 0, alpha: 0) : themeCardColor
                button.isEnabled = true
            }
        }
    }
    
    @IBAction private func selectCard(_ sender: UIButton) {
        if let cardNumber = cardButtons.firstIndex(of: sender) {
            game.chooseCard(at: cardNumber)
            updateView()
            UIView.animate(withDuration: 1.5, animations: {
            })
            matchLabel.text = "Matches: \(game.matches)"
            scoreLabel.text = "Score: \(game.score)"
        } else {
            print("Chosen card was not in cardButtons")
        }
        if game.matches == numberOfPairsOfCards {
            restartButton.isHidden = false
        }
    }
    
    @IBAction private func restartButtonPressed(_ sender: UIButton) {
        restartButton.isHidden = true
        game.resetCards()
        game = Concentration(numberOfPairsOfCards: numberOfPairsOfCards)
        emoji.removeAll()
        settingTheme()
        updateView()
        scoreLabel.text = "Score: \(game.score)"
        matchLabel.text = "Matches: \(game.matches)"
    }
    
    private func emoji(for card: Card) -> String {
        if emoji[card] == nil && themeCardTitles != nil {
            emoji[card] = themeCardTitles!.remove(at: themeCardTitles!.count.arc4random)
        }
        return emoji[card] ?? "?"
    }
    
}



//lazy –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –∫—Ç–æ-—Ç–æ –Ω–µ –∑–∞–ø—Ä–æ—Å–∏—Ç –µ–µ
/* private lazy var game = Concentration(numberOfPairsOfCards: numberOfPairsOfCards)
 
 //–Ø –Ω–µ –≤–æ–∑—Ä–∞–∂–∞—é, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∑–∞—Ö–æ—á–µ—Ç —É–∑–Ω–∞—Ç—å —á–∏—Å–ª–æ –ø–∞—Ä–Ω—ã—Ö –∫–∞—Ä—Ç, –Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∫—É —ç—Ç–æ–≥–æ —á–∏—Å–ª–∞ —è –ø—Ä–µ–¥–ø–æ—á–µ–ª –±—ã –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å. –ú–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ‚Äãprivate (set)‚Äã, –Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ‚ÄãnumberOfPairsOfCards‚Äã —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ ‚Äãget{} —Å‚Äã –≤–æ–∏ÃÜ—Å—Ç–≤–æ–º, –æ–Ω–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏—Å—Ö–æ–¥—è –∏–∑ –¥—Ä—É–≥–æ–≥–æ —Å–≤–æ–∏ÃÜ—Å—Ç–≤–∞, —Ç–∞–∫ —á—Ç–æ –º—ã –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –Ω–µ –º–æ–∂–µ–º –µ–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –ù–ï- ‚Äãprivate
 var numberOfPairsOfCards: Int {
 return (cardButtons.count + 1) / 2
 }
 
 //–¢–æ –∂–µ —Å–∞–º–æ–µ —Å ‚ÄãflipCount‚Äã. –Ø –¥—É–º–∞—é, —á—Ç–æ –ª—é–¥–∏ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∞—Ç—å ‚ÄãflipCount‚Äã, –Ω–æ –æ–Ω–∏, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ, –Ω–µ –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å ‚ÄãflipCount‚Äã. –≠—Ç–æ –Ω–∞—à–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, –∫–æ–≥–¥–∞ –∫–∞—Ä—Ç–∞ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è.
 private (set) var flipCount = 0 {
 didSet {
 updateFlipCountLabel()
 }
 }
 
 private func updateFlipCountLabel(){
 let attributes: [NSAttributedString.Key: Any] = [
 .strokeWidth: 5.0,//—Ç–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–∏ –æ–±–≤–æ–¥–∫–∏
 .strokeColor: #colorLiteral(red: 1, green: 0.5763723254, blue: 0, alpha: 1)
 ]
 let attributedString = NSAttributedString(string: "Flips: \(flipCount)", attributes: attributes)
 
 flipCountLabel.attributedText = attributedString
 }
 
 //–ü–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –Ω–∞—à–∏ ‚ÄãOutlets‚Äã –∏ ‚ÄãActions‚Äã –±—É–¥—É—Ç ‚Äãprivate‚Äã, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤—Å–µ –æ–Ω–∏ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–∏ÃÜ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞—à–µ–≥–æ ‚ÄãUI‚Äã.
 @IBOutlet private var cardButtons: [UIButton]!
 
 @IBOutlet private weak var flipCountLabel: UILabel!{
 didSet {
 updateFlipCountLabel()
 }
 }
 
 @IBAction private func touchCard(_ sender: UIButton) {
 flipCount += 1
 if let cardNumber = cardButtons.firstIndex(of: sender){//–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
 game.chooseCard(at: cardNumber)
 updateViewFromModel()
 }
 else{
 print("choosen card was not in cardButtons")
 }
 if game.matches == numberOfPairsOfCards {
 restart.isHidden = false
 }
 }
 
 @IBOutlet private weak var restart: UIButton!
 
 override func viewDidLoad() {
 super.viewDidLoad()
 //settingTheme()
 updateViewFromModel()
 restart.isHidden = true
 }
 
 //private func settingTheme() {
 //        let themes = [halloweenTheme, happyTheme, sadTheme, foodTheme]
 //        let randomTheme = themes.count.arc4random
 //        //        print(themes[randomTheme])
 //        themeBackgroundColor = themes[randomTheme].backgroundColor
 //        themeCardColor = themes[randomTheme].cardColor
 //        themeCardTitles = themes[randomTheme].cardTitles
 //        view.backgroundColor = themeBackgroundColor
 //        scoreLabel.textColor = themeCardColor
 //        matchLabel.textColor = themeCardColor
 //        restartButton.tintColor = themeCardColor
 //        timeBonusLabel.textColor = themeCardColor
 // }
 
 //–∫–æ–Ω–µ—á–Ω–æ –∂–µ, –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, –ø–æ—ç—Ç–æ–º—É ‚Äãprivate
 private func updateViewFromModel () {
 for index in cardButtons.indices{
 let button = cardButtons[index]
 let card = game.cards[index]
 if card.isFaceUp {
 button.setTitle(emoji (for: card), for: UIControl.State.normal)
 button.backgroundColor = #colorLiteral(red: 1, green: 1, blue: 1, alpha: 1)
 }
 else{
 button.setTitle("", for: UIControl.State.normal)
 button.backgroundColor = card.isMatched ? #colorLiteral(red: 1, green: 1, blue: 1, alpha: 0) : #colorLiteral(red: 1, green: 0.5763723254, blue: 0, alpha: 1)
 }
 }
 }
 
 //–í—Å–µ —ç—Ç–∏ –¥–µ–ª–∞ —Å —ç–º–æ–¥–∂–∏ - ‚Äãprivate
 //private var emojiChoices = ["ü¶á", "üò±", "üôÄ", "üòà", "üéÉ", "üëª", "üç≠", "üç¨", "üçé"]
 private var emojiChoices = "ü¶áüò±üôÄüòàüéÉüëªüç≠üç¨üçé"
 
 private var emoji = [Card: String]()
 
 private func emoji(for card: Card) -> String {
 if emoji[card] == nil, emojiChoices.count > 0 {
 let randomStringIndex = emojiChoices.index(emojiChoices.startIndex, offsetBy: emojiChoices.count.arc4random)
 emoji[card] = String(emojiChoices.remove(at: randomStringIndex))
 }
 return emoji[card] ?? "?"
 }*/

